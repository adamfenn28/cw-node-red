[
    {
        "id": "2a8b02ca.5fe626",
        "type": "tab",
        "label": "My Observatory",
        "disabled": false,
        "info": ""
    },
    {
        "id": "db0229d041ab9ff5",
        "type": "group",
        "z": "2a8b02ca.5fe626",
        "name": "Astrospheric",
        "style": {
            "label": true,
            "stroke": "#000000",
            "fill": "#dbcbe7",
            "color": "#000000"
        },
        "nodes": [
            "a4436576abb33f7c",
            "c67724ea8afa3192",
            "b0118a046bdab59b",
            "44ddbdaae7840fa5",
            "33aedae4a7b740fe"
        ],
        "x": 14,
        "y": 659,
        "w": 912,
        "h": 82
    },
    {
        "id": "ecde79bf94f43d5d",
        "type": "group",
        "z": "2a8b02ca.5fe626",
        "name": "Moon Data",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "color": "#3f3f3f"
        },
        "nodes": [
            "84d5f8cd91983c52",
            "afcfbf2bc4831528",
            "e19f826d4076368e",
            "4cdd62346387b047",
            "2ed1fc9fc3b18be0",
            "fb58c01a301caf78",
            "fa9468f5551f22f4",
            "dba260bb5aa9fe77",
            "e51b86a0a254896c",
            "f303d5f90e7d002a",
            "c354bd70ae24d7c4",
            "fac09dfdb164be4c",
            "f158abe186e1a046",
            "1a19de1a53c07b06",
            "55018d2ebf5efc50",
            "38548cb9b471c0d7",
            "bda5124dcfb07519",
            "59b4a5498e9e6852",
            "fa8f248b5ba76cff",
            "43d7fac82e106780",
            "e5211966bf974c52",
            "19c77c2a39cbab31",
            "763977e3f8169597"
        ],
        "x": 14,
        "y": 779,
        "w": 1112,
        "h": 322
    },
    {
        "id": "d763b73b917ec7bc",
        "type": "group",
        "z": "2a8b02ca.5fe626",
        "name": "Cloudwatcher Widges",
        "style": {
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "229c1832.a883c8",
            "d46fc348.cc279",
            "11ad28c8.47b987",
            "405c85dc.d9315c",
            "fd03b3c7.8e64b8",
            "18ba1e16.c3d6c2",
            "ecb5fcbf.781158",
            "ab6551534cddcb92",
            "d971640f73d07862",
            "dd5da46eef95e760",
            "a052e7e1f59dbe80",
            "c6409890b9f89df6",
            "995f122ac631455f",
            "7c8fa3a5782168b2",
            "68d4b086dd06e122",
            "ca50cb5bcea88b4f",
            "81a496cb18d389cb",
            "fabd3a86aba31870",
            "2ad4920e4076052b",
            "f0e7527c5cad4165",
            "5b0e9ae4fa1bc87e",
            "72ce935bbdbd4a4a",
            "dc8361761e0e6035",
            "b7311c9b220ff082",
            "5c1040226747670d",
            "69fea03c8881396f",
            "c2b2f15fb19335e4",
            "acd64fc34e1e6784",
            "d1dd4e6da6162667",
            "c7c932a38219974a",
            "b78b89d88c1c3e2a",
            "a3559b0af336b01c",
            "36b5600e8164042d"
        ],
        "x": 14,
        "y": -1,
        "w": 1192,
        "h": 642
    },
    {
        "id": "229c1832.a883c8",
        "type": "inject",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "5 secs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "d46fc348.cc279"
            ]
        ]
    },
    {
        "id": "d46fc348.cc279",
        "type": "http request",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "Solo last data",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.215/cgi-bin/cgiLastData",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 300,
        "y": 60,
        "wires": [
            [
                "5b0e9ae4fa1bc87e"
            ]
        ]
    },
    {
        "id": "11ad28c8.47b987",
        "type": "ui_chart",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "Wind History",
        "group": "dc0984f6.cbae78",
        "order": 21,
        "width": 14,
        "height": 5,
        "label": "Wind History",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#787878",
            "#fafafa",
            "#ff0f0f",
            "#fafafa",
            "#ff9896",
            "#787878",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1050,
        "y": 300,
        "wires": [
            []
        ],
        "info": "MPH"
    },
    {
        "id": "405c85dc.d9315c",
        "type": "ui_chart",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "Temperature History",
        "group": "dc0984f6.cbae78",
        "order": 23,
        "width": 14,
        "height": 5,
        "label": "Temperature History",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#787878",
            "#00ffff",
            "#2ac00c",
            "#34ea10",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1080,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "fd03b3c7.8e64b8",
        "type": "ui_gauge",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "Wind Gust",
        "group": "dc0984f6.cbae78",
        "order": 10,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Gust",
        "label": "MPH",
        "format": "{{value|number:1}}",
        "min": "0",
        "max": "50",
        "colors": [
            "#2ce272",
            "#eeba58",
            "#ff0000"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1050,
        "y": 260,
        "wires": [],
        "inputLabels": [
            "msg.payload"
        ]
    },
    {
        "id": "18ba1e16.c3d6c2",
        "type": "ui_text",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "group": "dc0984f6.cbae78",
        "order": 3,
        "width": 1,
        "height": 1,
        "name": "Light",
        "label": "",
        "format": "<font color={{msg.color}} size=\"+2\">{{msg.payload}}</font>",
        "layout": "col-center",
        "className": "",
        "x": 1030,
        "y": 540,
        "wires": []
    },
    {
        "id": "ecb5fcbf.781158",
        "type": "ui_text",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "group": "dc0984f6.cbae78",
        "order": 2,
        "width": 1,
        "height": 1,
        "name": "Precip",
        "label": "",
        "format": "<font color={{msg.color}} size=\"+2\">{{msg.payload}}</font>",
        "layout": "col-center",
        "className": "",
        "x": 1030,
        "y": 440,
        "wires": []
    },
    {
        "id": "ab6551534cddcb92",
        "type": "ui_gauge",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "Wind Speed",
        "group": "dc0984f6.cbae78",
        "order": 9,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Wind Speed",
        "label": "MPH",
        "format": "{{value|number:1}}",
        "min": "0",
        "max": "50",
        "colors": [
            "#2ce272",
            "#eeba58",
            "#ff0000"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1050,
        "y": 220,
        "wires": [],
        "inputLabels": [
            "msg.payload"
        ]
    },
    {
        "id": "d971640f73d07862",
        "type": "ui_chart",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "Precipitation History",
        "group": "dc0984f6.cbae78",
        "order": 22,
        "width": 14,
        "height": 5,
        "label": "Precipitation History",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "5000",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1080,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "dd5da46eef95e760",
        "type": "ui_gauge",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "Temp",
        "group": "dc0984f6.cbae78",
        "order": 11,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Temp",
        "label": "F",
        "format": "{{value|number:1}}",
        "min": "-40",
        "max": "120",
        "colors": [
            "#94dfff",
            "#eeba58",
            "#ff0000"
        ],
        "seg1": "50",
        "seg2": "80",
        "className": "",
        "x": 1030,
        "y": 80,
        "wires": [],
        "inputLabels": [
            "msg.payload"
        ]
    },
    {
        "id": "a052e7e1f59dbe80",
        "type": "ui_chart",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "Light History",
        "group": "dc0984f6.cbae78",
        "order": 24,
        "width": 14,
        "height": 5,
        "label": "Light History",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "60000",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ffea00",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1050,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "c6409890b9f89df6",
        "type": "ui_text",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "group": "dc0984f6.cbae78",
        "order": 4,
        "width": 1,
        "height": 1,
        "name": "Clouds",
        "label": "",
        "format": "<font color={{msg.color}} size=\"+2\">{{msg.payload}}</font>",
        "layout": "col-center",
        "className": "",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "995f122ac631455f",
        "type": "ui_text",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "group": "dc0984f6.cbae78",
        "order": 6,
        "width": 1,
        "height": 1,
        "name": "Safe",
        "label": "",
        "format": "<font color={{msg.color}} size=\"+2\">{{msg.payload}}</font>",
        "layout": "col-center",
        "className": "",
        "x": 1030,
        "y": 600,
        "wires": []
    },
    {
        "id": "7c8fa3a5782168b2",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "clouds status",
        "func": "var config = context.get('config') || false;\nvar data = context.get('data') || false;\n\nif (msg.topic === 'config') {\n   config = msg.payload;\n   context.set('config', config);\n} else if (msg.topic === 'data' ) {\n   data = msg.payload;\n   context.set('data', data);\n}\n\nif (data.clouds < config.Clear)   {\n   msg.payload = \"Clear\";\n   msg.color = \"#EFEFEF\";\n} else if (data.clouds < config.Cloudy) {\n   msg.payload = \"Cloudy\";\n   msg.color = \"orange\";\n} else if (data.clouds < config.Overcast) {\n   msg.payload = \"Overcast\";\n   msg.color = \"red\";\n} else {\n   msg.payload = \"Unknown\";\n   msg.color = \"red\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 160,
        "wires": [
            [
                "c6409890b9f89df6"
            ]
        ]
    },
    {
        "id": "68d4b086dd06e122",
        "type": "http request",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "config.pl",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.215/cgi-bin/config.pl",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 320,
        "y": 100,
        "wires": [
            [
                "2ad4920e4076052b"
            ]
        ]
    },
    {
        "id": "ca50cb5bcea88b4f",
        "type": "inject",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "5 minutes",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "68d4b086dd06e122"
            ]
        ]
    },
    {
        "id": "a4436576abb33f7c",
        "type": "ui_template",
        "z": "2a8b02ca.5fe626",
        "g": "db0229d041ab9ff5",
        "group": "dc0984f6.cbae78",
        "name": "script",
        "order": 25,
        "width": 0,
        "height": 0,
        "format": "<script type=\"text/javascript\"\n    src=\"https://astrosphericcloudstorage.blob.core.windows.net/embed/astrosphericembed.js\" />",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 850,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "c67724ea8afa3192",
        "type": "ui_template",
        "z": "2a8b02ca.5fe626",
        "g": "db0229d041ab9ff5",
        "group": "dc0984f6.cbae78",
        "name": "astrospheric",
        "order": 7,
        "width": 8,
        "height": 14,
        "format": "",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "81a496cb18d389cb",
        "type": "ui_gauge",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "Sky Temp",
        "group": "dc0984f6.cbae78",
        "order": 12,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Sky Temp",
        "label": "F",
        "format": "{{value|number:1}}",
        "min": "-50",
        "max": "60",
        "colors": [
            "#94dfff",
            "#eeba58",
            "#ff0000"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1040,
        "y": 40,
        "wires": [],
        "inputLabels": [
            "msg.payload"
        ]
    },
    {
        "id": "fabd3a86aba31870",
        "type": "ui_text",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "group": "dc0984f6.cbae78",
        "order": 1,
        "width": 1,
        "height": 1,
        "name": "Wind",
        "label": "",
        "format": "<font color={{msg.color}} size=\"+2\">{{msg.payload}}</font>",
        "layout": "col-center",
        "className": "",
        "x": 1030,
        "y": 340,
        "wires": []
    },
    {
        "id": "b0118a046bdab59b",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "db0229d041ab9ff5",
        "name": "Lat/Long",
        "func": "var config = context.get('config') || false;\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config)\n}\n\nmsg.lat = config.Latitude;\nmsg.long = config.Longitude;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 100,
        "y": 700,
        "wires": [
            [
                "44ddbdaae7840fa5"
            ]
        ]
    },
    {
        "id": "44ddbdaae7840fa5",
        "type": "template",
        "z": "2a8b02ca.5fe626",
        "g": "db0229d041ab9ff5",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!--Create a div for the Astrospheric Control to live in -->\n<div id=\"AstrosphericEmbedContainer\">\n</div>\n\n<!--Now setup the control with the Javascript API -->\n<script type=\"text/javascript\">\n    // Initialize the control\n\t\t\tm_AstrosphericEmbed.Create(\"AstrosphericEmbedContainer\", {{lat}}, {{long}});\n\n</script>",
        "output": "str",
        "x": 280,
        "y": 700,
        "wires": [
            [
                "c67724ea8afa3192"
            ]
        ]
    },
    {
        "id": "2ad4920e4076052b",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "config.json",
        "func": "var lines;\nvar pair;\nvar i;\nvar value;\n\nlines = msg.payload.split(\"\\n\");\nmsg.payload = \"{\";\nfor (i=0; i<lines.length-1; i++) {\n    pair = lines[i].split(\"=\");\n    \n    if (isNaN(Number(pair[1])) || pair[1] == \"\") {\n        pair[1] = \"\\\"\" + pair[1] + \"\\\"\";\n    }\n\n    msg.payload = msg.payload + \"\\\"\" + pair[0] + \"\\\":\" + pair[1];\n\n    if (i < lines.length - 2)\n        msg.payload = msg.payload + \",\";\n}\nmsg.payload = msg.payload + \"}\";\n\nmsg.topic = \"config\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 140,
        "wires": [
            [
                "f0e7527c5cad4165"
            ]
        ]
    },
    {
        "id": "f0e7527c5cad4165",
        "type": "json",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "objects",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 640,
        "y": 80,
        "wires": [
            [
                "72ce935bbdbd4a4a",
                "dc8361761e0e6035",
                "b7311c9b220ff082",
                "5c1040226747670d",
                "69fea03c8881396f",
                "c2b2f15fb19335e4",
                "7c8fa3a5782168b2",
                "acd64fc34e1e6784",
                "d1dd4e6da6162667",
                "c7c932a38219974a",
                "b78b89d88c1c3e2a",
                "a3559b0af336b01c",
                "36b5600e8164042d",
                "b0118a046bdab59b"
            ]
        ]
    },
    {
        "id": "5b0e9ae4fa1bc87e",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "lastData.json",
        "func": "var lines;\nvar pair;\nvar i;\nvar value;\n\nlines = msg.payload.split(\"\\n\");\nmsg.payload = \"{\";\nfor (i=0; i<lines.length-1; i++) {\n    pair = lines[i].split(\"=\");\n    \n    if (isNaN(Number(pair[1])) || pair[1] == \"\") {\n        pair[1] = \"\\\"\" + pair[1] + \"\\\"\";\n    }\n\n    msg.payload = msg.payload + \"\\\"\" + pair[0] + \"\\\":\" + pair[1];\n\n    if (i < lines.length - 2)\n        msg.payload = msg.payload + \",\";\n}\nmsg.payload = msg.payload + \"}\";\n\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 40,
        "wires": [
            [
                "f0e7527c5cad4165"
            ]
        ]
    },
    {
        "id": "72ce935bbdbd4a4a",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "format skytemp",
        "func": "var data = context.get('data') || false;\nvar config = context.get('config') || false;\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n} \n\nif (msg.topic === 'data') {\n    data = msg.payload;\n    context.set('data', data);\n}\n\nmsg.payload = Math.round((data.clouds * 9/5+32) * 100) / 100;\nvar min\n\nif (config.GraphCloudyMin != \"\")\n    min = -50;\nelse \n    min = config.GraphCloudy.Min;\n\nmsg.ui_control = { min: min, max: Math.round(config.Overcast * 9/5+32), seg1: config.Clear * 9/5+32, seg2: config.Cloudy * 9/5+32 }\nmsg.topic = \"Sky\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 40,
        "wires": [
            [
                "81a496cb18d389cb",
                "405c85dc.d9315c"
            ]
        ]
    },
    {
        "id": "dc8361761e0e6035",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "format temp",
        "func": "var data = context.get('data') || false;\n\nif (msg.topic === 'data') {\n    data = msg.payload;\n    context.set('data', data);\n}\n\nmsg.payload = Math.round((data.temp * 9/5+32) * 100) / 100;\nmsg.topic = \"Ambient\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 80,
        "wires": [
            [
                "dd5da46eef95e760",
                "405c85dc.d9315c"
            ]
        ]
    },
    {
        "id": "b7311c9b220ff082",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "format limit",
        "func": "var config = context.get('config') || false;\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n}\n\nmsg.payload = Math.round((config.Sw_Clouds * 9/5+32) * 100) / 100;\n\nmsg.topic = \"Limit\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 120,
        "wires": [
            [
                "405c85dc.d9315c"
            ]
        ]
    },
    {
        "id": "5c1040226747670d",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "format wind speed",
        "func": "var data = context.get('data') || false;\nvar config = context.get('config') || false;\n\nif (msg.topic === 'data') {\n    data = msg.payload;\n    context.set('data', data);\n}\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n}\n\nmsg.payload = Math.round(data.wind * 62.1371)/100;\nmsg.ui_control = { min: 0, max: Math.round(config.VeryWindy * .621371), seg1: config.Calm * .621371, seg2: config.Windy * .621371 }\nmsg.topic = \"Wind\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 220,
        "wires": [
            [
                "ab6551534cddcb92",
                "11ad28c8.47b987"
            ]
        ]
    },
    {
        "id": "69fea03c8881396f",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "format gust speed",
        "func": "var data = context.get('data') || false;\nvar config = context.get('config') || false;\n\nif (msg.topic === 'data') {\n    data = msg.payload;\n    context.set('data', data);\n}\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n}\n\nmsg.payload = Math.round(data.gust * 62.1371) / 100;\nmsg.ui_control = { min: 0, max: Math.round(config.VeryWindy * .621371), seg1: config.Calm * .621371, seg2: config.Windy * .621371 }\nmsg.topic = \"Gust\";\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 260,
        "wires": [
            [
                "fd03b3c7.8e64b8",
                "11ad28c8.47b987"
            ]
        ]
    },
    {
        "id": "c2b2f15fb19335e4",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "format limit",
        "func": "var config = context.get('config') || false;\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n}\n\nmsg.payload = Math.round(config.Sw_Wind * 62.1371) / 100;\nmsg.topic = \"Limit\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 300,
        "wires": [
            [
                "11ad28c8.47b987"
            ]
        ]
    },
    {
        "id": "acd64fc34e1e6784",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "format rain",
        "func": "var data = context.get('data') || false;\nvar config = context.get('config') || false;\n\nif (msg.topic === 'data') {\n    data = msg.payload;\n    context.set('data', data);\n}\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n}\nmsg.payload = data.rain;\nmsg.topic = \"Precipitation\";\nmsg.ui_control = { \"ymax\": config.GraphRainMax }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 400,
        "wires": [
            [
                "d971640f73d07862"
            ]
        ]
    },
    {
        "id": "d1dd4e6da6162667",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "format light",
        "func": "var data = context.get('data') || false;\nvar config = context.get('config') || false;\n\nif (msg.topic === 'data') {\n    data = msg.payload;\n    context.set('data', data);\n} else if (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n}\n\nmsg.payload = data.light;\nmsg.topic = \"Light\";\nmsg.ui_control = { \"ymax\": config.GraphLightMax }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 500,
        "wires": [
            [
                "a052e7e1f59dbe80"
            ]
        ]
    },
    {
        "id": "c7c932a38219974a",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "format safe",
        "func": "var data = context.get('data') || false;\n\nif (msg.topic === 'data') {\n    data = msg.payload;\n    context.set('data', data);\n}\n\nif (parseInt(data.safe) === 0) {\n    msg.payload = \"Unsafe\";\n    msg.color = \"red\";\n} else {\n    msg.payload = \"Safe\";\n    msg.color = \"#EFEFEF\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 600,
        "wires": [
            [
                "995f122ac631455f"
            ]
        ]
    },
    {
        "id": "b78b89d88c1c3e2a",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "wind status",
        "func": "var config = context.get('config') || false;\nvar data = context.get('data') || false;\n\nif (msg.topic === 'config') {\n   config = msg.payload;\n   context.set('config', config);\n} else if (msg.topic === 'data' ) {\n   data = msg.payload;\n   context.set('data', data);\n}\n\nif (data.wind < config.Calm)   {\n   msg.payload = \"Calm\";\n   msg.color = \"#EFEFEF\";\n} else if (data.wind < config.Windy) {\n   msg.payload = \"Windy\";\n   msg.color = \"orange\";\n} else if (data.wind < config.VeryWindy) {\n   msg.payload = \"Very Windy\";\n   msg.color = \"red\";\n} else {\n   msg.payload = \"Unknown\";\n   msg.wind = \"red\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 340,
        "wires": [
            [
                "fabd3a86aba31870"
            ]
        ]
    },
    {
        "id": "a3559b0af336b01c",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "precip status",
        "func": "var config = context.get('config') || false;\nvar data = context.get('data') || false;\n\nif (msg.topic === 'config') {\n   config = msg.payload;\n   context.set('config', config);\n} else if (msg.topic === 'data' ) {\n   data = msg.payload;\n   context.set('data', data);\n}\n\nif (data.rain > config.Dry)   {\n   msg.payload = \"Dry\";\n   msg.color = \"#EFEFEF\";\n} else if (data.rain > config.Wet) {\n   msg.payload = \"Dew\";\n   msg.color = \"yellow\";\n} else if (data.rain > config.Rain) {\n   msg.payload = \"Rain\";\n   msg.color = \"red\";\n} else {\n   msg.payload = \"Unknown\";\n   msg.wind = \"red\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 440,
        "wires": [
            [
                "ecb5fcbf.781158"
            ]
        ]
    },
    {
        "id": "36b5600e8164042d",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "d763b73b917ec7bc",
        "name": "light status",
        "func": "var config = context.get('config') || false;\nvar data = context.get('data') || false;\n\nif (msg.topic === 'config') {\n   config = msg.payload;\n   context.set('config', config);\n} else if (msg.topic === 'data' ) {\n   data = msg.payload;\n   context.set('data', data);\n}\n\nif (data.light > config.Dark)   {\n   msg.payload = \"Dark\";\n   msg.color = \"#EFEFEF\";\n} else if (data.light > config.Light) {\n   msg.payload = \"Light\";\n   msg.color = \"yellow\";\n} else if (data.light > config.VeryLight) {\n   msg.payload = \"Very Light\";\n   msg.color = \"orange\";\n} else {\n   msg.payload = \"Unknown\";\n   msg.wind = \"red\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 540,
        "wires": [
            [
                "18ba1e16.c3d6c2"
            ]
        ]
    },
    {
        "id": "84d5f8cd91983c52",
        "type": "ui_template",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "group": "dc0984f6.cbae78",
        "name": "moon",
        "order": 13,
        "width": 3,
        "height": 4,
        "format": "<div style=\"font-size: 144px; text-align: center; vertical-align: center\">\n    <i class=\"wi {{msg.payload}}\"></i>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1010,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "afcfbf2bc4831528",
        "type": "ui_text",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "group": "dc0984f6.cbae78",
        "order": 18,
        "width": 3,
        "height": 1,
        "name": "Phase",
        "label": "",
        "format": "<font size=\"+2\">{{msg.payload}}</font>",
        "layout": "col-center",
        "className": "",
        "x": 1010,
        "y": 860,
        "wires": []
    },
    {
        "id": "e19f826d4076368e",
        "type": "ui_text",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "group": "dc0984f6.cbae78",
        "order": 16,
        "width": 3,
        "height": 1,
        "name": "Moonrise",
        "label": "<font size=\"+2\">Moonrise:</font>",
        "format": "<font size=\"+2\">{{msg.rise}}</font>",
        "layout": "row-spread",
        "className": "",
        "x": 1020,
        "y": 980,
        "wires": []
    },
    {
        "id": "4cdd62346387b047",
        "type": "ui_text",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "group": "dc0984f6.cbae78",
        "order": 17,
        "width": 3,
        "height": 1,
        "name": "Moonset",
        "label": "<font size=\"+2\">Moonset:</font>",
        "format": "<font size=\"+2\">{{msg.set}}</font>",
        "layout": "row-spread",
        "className": "",
        "x": 1020,
        "y": 1020,
        "wires": []
    },
    {
        "id": "2ed1fc9fc3b18be0",
        "type": "ui_text",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "group": "dc0984f6.cbae78",
        "order": 14,
        "width": 3,
        "height": 1,
        "name": "Dusk",
        "label": "<font size=\"+2\">Astro Dusk:</font>",
        "format": "<font size=\"+2\">{{msg.payload}}</font>",
        "layout": "row-spread",
        "className": "",
        "x": 1010,
        "y": 900,
        "wires": []
    },
    {
        "id": "fb58c01a301caf78",
        "type": "ui_text",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "group": "dc0984f6.cbae78",
        "order": 15,
        "width": 3,
        "height": 1,
        "name": "Dawn",
        "label": "<font size=\"+2\">Astro Dawn:</font>",
        "format": "<font size=\"+2\">{{msg.payload}}</font>",
        "layout": "row-spread",
        "className": "",
        "x": 1010,
        "y": 940,
        "wires": []
    },
    {
        "id": "fa9468f5551f22f4",
        "type": "ui_text",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "group": "dc0984f6.cbae78",
        "order": 19,
        "width": 3,
        "height": 1,
        "name": "Illumination",
        "label": "<font size=\"+2\">Illumination:</font>",
        "format": "<font size=\"+2\">{{msg.payload}}%</font>",
        "layout": "row-spread",
        "className": "",
        "x": 1030,
        "y": 1060,
        "wires": []
    },
    {
        "id": "dba260bb5aa9fe77",
        "type": "inject",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "Daily",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "05 18 * * *",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 900,
        "wires": [
            [
                "fac09dfdb164be4c",
                "59b4a5498e9e6852"
            ]
        ]
    },
    {
        "id": "e51b86a0a254896c",
        "type": "template",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "params",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\"lat\":{{payload.Latitude}},\"lng\":{{payload.Longitude}},\"start\":\"{{payload.time}}\"}",
        "output": "json",
        "x": 120,
        "y": 1040,
        "wires": [
            [
                "f303d5f90e7d002a",
                "5c57afaf0dae66db"
            ]
        ]
    },
    {
        "id": "f303d5f90e7d002a",
        "type": "http request",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "https://api.stormglass.io/v2/astronomy/point",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "YOUR_KEY"
            }
        ],
        "x": 290,
        "y": 1040,
        "wires": [
            [
                "55018d2ebf5efc50",
                "5c57afaf0dae66db"
            ]
        ]
    },
    {
        "id": "c354bd70ae24d7c4",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "Format Illumination",
        "func": "var config = context.get('config') || false;\nvar response = context.get('response') || false;\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n} else if (msg.topic === 'response') {\n    response = msg.payload;\n    context.set('response', response);\n}\n\nmsg.payload = Math.round(response.data[1].moonFraction * 1000)/10;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1060,
        "wires": [
            [
                "fa9468f5551f22f4"
            ]
        ]
    },
    {
        "id": "fac09dfdb164be4c",
        "type": "template",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "test response",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\"data\":[{\"astronomicalDawn\":\"2022-11-17T11:35:43+00:00\",\"astronomicalDusk\":\"2022-11-18T00:37:06+00:00\",\"civilDawn\":\"2022-11-17T12:41:38+00:00\",\"civilDusk\":\"2022-11-17T23:31:11+00:00\",\"moonFraction\":0.4059495304478128,\"moonPhase\":{\"closest\":{\"text\":\"Third quarter\",\"time\":\"2022-11-16T14:39:00+00:00\",\"value\":0.75},\"current\":{\"text\":\"Waning crescent\",\"time\":\"2022-11-17T12:00:00+00:00\",\"value\":0.7801166052125458}},\"moonrise\":\"2022-11-17T06:05:55+00:00\",\"moonset\":\"2022-11-17T20:08:18+00:00\",\"nauticalDawn\":\"2022-11-17T12:08:17+00:00\",\"nauticalDusk\":\"2022-11-18T00:04:32+00:00\",\"sunrise\":\"2022-11-17T13:11:16+00:00\",\"sunset\":\"2022-11-17T23:01:34+00:00\",\"time\":\"2022-11-17T12:00:00+00:00\"},{\"astronomicalDawn\":\"2022-11-18T11:36:44+00:00\",\"astronomicalDusk\":\"2022-11-19T00:36:31+00:00\",\"civilDawn\":\"2022-11-18T12:42:45+00:00\",\"civilDusk\":\"2022-11-18T23:30:30+00:00\",\"moonFraction\":0.311631952388839,\"moonPhase\":{\"closest\":{\"text\":\"Third quarter\",\"time\":\"2022-11-16T16:25:00+00:00\",\"value\":0.75},\"current\":{\"text\":\"Waning crescent\",\"time\":\"2022-11-18T12:00:00+00:00\",\"value\":0.8114768189818169}},\"moonrise\":\"2022-11-18T07:09:23+00:00\",\"moonset\":\"2022-11-18T20:30:27+00:00\",\"nauticalDawn\":\"2022-11-18T12:09:21+00:00\",\"nauticalDusk\":\"2022-11-19T00:03:55+00:00\",\"sunrise\":\"2022-11-18T13:12:27+00:00\",\"sunset\":\"2022-11-18T23:00:48+00:00\",\"time\":\"2022-11-18T12:00:00+00:00\"},{\"astronomicalDawn\":\"2022-11-19T11:37:45+00:00\",\"astronomicalDusk\":\"2022-11-20T00:35:58+00:00\",\"civilDawn\":\"2022-11-19T12:43:51+00:00\",\"civilDusk\":\"2022-11-19T23:29:51+00:00\",\"moonFraction\":0.22239064665576797,\"moonPhase\":{\"closest\":{\"text\":\"Third quarter\",\"time\":\"2022-11-16T17:36:00+00:00\",\"value\":0.75},\"current\":{\"text\":\"Waning crescent\",\"time\":\"2022-11-19T12:00:00+00:00\",\"value\":0.8436827224302327}},\"moonrise\":\"2022-11-19T08:13:37+00:00\",\"moonset\":\"2022-11-19T20:51:55+00:00\",\"nauticalDawn\":\"2022-11-19T12:10:24+00:00\",\"nauticalDusk\":\"2022-11-20T00:03:19+00:00\",\"sunrise\":\"2022-11-19T13:13:38+00:00\",\"sunset\":\"2022-11-19T23:00:05+00:00\",\"time\":\"2022-11-19T12:00:00+00:00\"},{\"astronomicalDawn\":\"2022-11-20T11:38:45+00:00\",\"astronomicalDusk\":\"2022-11-21T00:35:27+00:00\",\"civilDawn\":\"2022-11-20T12:44:58+00:00\",\"civilDusk\":\"2022-11-20T23:29:14+00:00\",\"moonFraction\":0.14244675858957478,\"moonPhase\":{\"closest\":{\"text\":\"New moon\",\"time\":\"2022-11-24T03:18:00+00:00\",\"value\":1},\"current\":{\"text\":\"Waning crescent\",\"time\":\"2022-11-20T12:00:00+00:00\",\"value\":0.8768109069282217}},\"moonrise\":\"2022-11-20T09:19:34+00:00\",\"moonset\":\"2022-11-20T21:14:02+00:00\",\"nauticalDawn\":\"2022-11-20T12:11:26+00:00\",\"nauticalDusk\":\"2022-11-21T00:02:46+00:00\",\"sunrise\":\"2022-11-20T13:14:48+00:00\",\"sunset\":\"2022-11-20T22:59:24+00:00\",\"time\":\"2022-11-20T12:00:00+00:00\"},{\"astronomicalDawn\":\"2022-11-21T11:39:45+00:00\",\"astronomicalDusk\":\"2022-11-22T00:34:58+00:00\",\"civilDawn\":\"2022-11-21T12:46:03+00:00\",\"civilDusk\":\"2022-11-21T23:28:39+00:00\",\"moonFraction\":0.07637462212177043,\"moonPhase\":{\"closest\":{\"text\":\"New moon\",\"time\":\"2022-11-24T03:10:00+00:00\",\"value\":1},\"current\":{\"text\":\"Waning crescent\",\"time\":\"2022-11-21T12:00:00+00:00\",\"value\":0.91087192694732}},\"moonrise\":\"2022-11-21T10:28:23+00:00\",\"moonset\":\"2022-11-21T21:38:18+00:00\",\"nauticalDawn\":\"2022-11-21T12:12:29+00:00\",\"nauticalDusk\":\"2022-11-22T00:02:14+00:00\",\"sunrise\":\"2022-11-21T13:15:58+00:00\",\"sunset\":\"2022-11-21T22:58:45+00:00\",\"time\":\"2022-11-21T12:00:00+00:00\"},{\"astronomicalDawn\":\"2022-11-22T11:40:44+00:00\",\"astronomicalDusk\":\"2022-11-23T00:34:30+00:00\",\"civilDawn\":\"2022-11-22T12:47:09+00:00\",\"civilDusk\":\"2022-11-22T23:28:06+00:00\",\"moonFraction\":0.02872905953893845,\"moonPhase\":{\"closest\":{\"text\":\"New moon\",\"time\":\"2022-11-24T02:25:00+00:00\",\"value\":1},\"current\":{\"text\":\"Waning crescent\",\"time\":\"2022-11-22T12:00:00+00:00\",\"value\":0.9457858604407955}},\"moonrise\":\"2022-11-22T11:40:59+00:00\",\"moonset\":\"2022-11-22T22:06:36+00:00\",\"nauticalDawn\":\"2022-11-22T12:13:30+00:00\",\"nauticalDusk\":\"2022-11-23T00:01:44+00:00\",\"sunrise\":\"2022-11-22T13:17:07+00:00\",\"sunset\":\"2022-11-22T22:58:08+00:00\",\"time\":\"2022-11-22T12:00:00+00:00\"},{\"astronomicalDawn\":\"2022-11-23T11:41:43+00:00\",\"astronomicalDusk\":\"2022-11-24T00:34:05+00:00\",\"civilDawn\":\"2022-11-23T12:48:13+00:00\",\"civilDusk\":\"2022-11-23T23:27:35+00:00\",\"moonFraction\":0.0035334495079895056,\"moonPhase\":{\"closest\":{\"text\":\"New moon\",\"time\":\"2022-11-24T01:25:00+00:00\",\"value\":1},\"current\":{\"text\":\"Waning crescent\",\"time\":\"2022-11-23T12:00:00+00:00\",\"value\":0.9810676003395291}},\"moonrise\":\"2022-11-23T12:57:26+00:00\",\"moonset\":\"2022-11-23T22:41:20+00:00\",\"nauticalDawn\":\"2022-11-23T12:14:32+00:00\",\"nauticalDusk\":\"2022-11-24T00:01:17+00:00\",\"sunrise\":\"2022-11-23T13:18:16+00:00\",\"sunset\":\"2022-11-23T22:57:32+00:00\",\"time\":\"2022-11-23T12:00:00+00:00\"},{\"astronomicalDawn\":\"2022-11-24T11:42:41+00:00\",\"astronomicalDusk\":\"2022-11-25T00:33:42+00:00\",\"civilDawn\":\"2022-11-24T12:49:17+00:00\",\"civilDusk\":\"2022-11-24T23:27:06+00:00\",\"moonFraction\":0.003713468101981865,\"moonPhase\":{\"closest\":{\"text\":\"New moon\",\"time\":\"2022-11-23T22:14:00+00:00\",\"value\":0},\"current\":{\"text\":\"Waxing crescent\",\"time\":\"2022-11-24T12:00:00+00:00\",\"value\":0.019409266925816515}},\"moonrise\":\"2022-11-24T14:15:49+00:00\",\"moonset\":\"2022-11-24T23:25:23+00:00\",\"nauticalDawn\":\"2022-11-24T12:15:32+00:00\",\"nauticalDusk\":\"2022-11-25T00:00:51+00:00\",\"sunrise\":\"2022-11-24T13:19:24+00:00\",\"sunset\":\"2022-11-24T22:56:59+00:00\",\"time\":\"2022-11-24T12:00:00+00:00\"},{\"astronomicalDawn\":\"2022-11-25T11:43:39+00:00\",\"astronomicalDusk\":\"2022-11-26T00:33:20+00:00\",\"civilDawn\":\"2022-11-25T12:50:21+00:00\",\"civilDusk\":\"2022-11-25T23:26:39+00:00\",\"moonFraction\":0.030590091299877498,\"moonPhase\":{\"closest\":{\"text\":\"New moon\",\"time\":\"2022-11-23T20:20:00+00:00\",\"value\":0},\"current\":{\"text\":\"Waxing crescent\",\"time\":\"2022-11-25T12:00:00+00:00\",\"value\":0.055960290584700534}},\"moonrise\":\"2022-11-25T15:31:35+00:00\",\"moonset\":\"2022-11-26T00:21:07+00:00\",\"nauticalDawn\":\"2022-11-25T12:16:33+00:00\",\"nauticalDusk\":\"2022-11-26T00:00:27+00:00\",\"sunrise\":\"2022-11-25T13:20:31+00:00\",\"sunset\":\"2022-11-25T22:56:28+00:00\",\"time\":\"2022-11-25T12:00:00+00:00\"},{\"astronomicalDawn\":\"2022-11-26T11:44:36+00:00\",\"astronomicalDusk\":\"2022-11-27T00:33:01+00:00\",\"civilDawn\":\"2022-11-26T12:51:24+00:00\",\"civilDusk\":\"2022-11-26T23:26:14+00:00\",\"moonFraction\":0.083544478658646,\"moonPhase\":{\"closest\":{\"text\":\"New moon\",\"time\":\"2022-11-23T17:50:00+00:00\",\"value\":0},\"current\":{\"text\":\"Waxing crescent\",\"time\":\"2022-11-26T12:00:00+00:00\",\"value\":0.09333626623674107}},\"moonrise\":\"2022-11-26T16:38:59+00:00\",\"moonset\":\"2022-11-26T00:21:07+00:00\",\"nauticalDawn\":\"2022-11-26T12:17:32+00:00\",\"nauticalDusk\":\"2022-11-27T00:00:05+00:00\",\"sunrise\":\"2022-11-26T13:21:38+00:00\",\"sunset\":\"2022-11-26T22:55:59+00:00\",\"time\":\"2022-11-26T12:00:00+00:00\"},{\"astronomicalDawn\":\"2022-11-27T11:45:33+00:00\",\"astronomicalDusk\":\"2022-11-28T00:32:44+00:00\",\"civilDawn\":\"2022-11-27T12:52:26+00:00\",\"civilDusk\":\"2022-11-27T23:25:51+00:00\",\"moonFraction\":0.1599342220202724,\"moonPhase\":{\"closest\":{\"text\":\"First quarter\",\"time\":\"2022-12-01T00:22:00+00:00\",\"value\":0.25},\"current\":{\"text\":\"Waxing crescent\",\"time\":\"2022-11-27T12:00:00+00:00\",\"value\":0.13096132181768594}},\"moonrise\":\"2022-11-27T17:34:24+00:00\",\"moonset\":\"2022-11-27T01:28:22+00:00\",\"nauticalDawn\":\"2022-11-27T12:18:31+00:00\",\"nauticalDusk\":\"2022-11-27T23:59:46+00:00\",\"sunrise\":\"2022-11-27T13:22:44+00:00\",\"sunset\":\"2022-11-27T22:55:33+00:00\",\"time\":\"2022-11-27T12:00:00+00:00\"}],\"meta\":{\"cost\":1,\"dailyQuota\":10,\"lat\":41,\"lng\":-95,\"requestCount\":4,\"start\":\"2022-11-17 12:00\"}}",
        "output": "str",
        "x": 180,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "f158abe186e1a046",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "format dawn",
        "func": "var config = context.get('config') || false;\nvar response = context.get('response') || false;\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n} else if (msg.topic === 'response') {\n    response = msg.payload;\n    context.set('response', response);\n}\n\n\nvar time = Date.parse(response.data[1].astronomicalDawn);\n\nvar secs = time + (config.TimeOffset * 1000);\ntime = new Date(secs);\n\nvar hours = String(time.getUTCHours()).padStart(2, 0);\nvar minutes = String(time.getUTCMinutes()).padStart(2, 0);\n\nmsg.payload = hours + \":\" + minutes;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 940,
        "wires": [
            [
                "fb58c01a301caf78"
            ]
        ]
    },
    {
        "id": "1a19de1a53c07b06",
        "type": "json",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 610,
        "y": 1040,
        "wires": [
            [
                "f158abe186e1a046",
                "c354bd70ae24d7c4",
                "38548cb9b471c0d7",
                "bda5124dcfb07519",
                "e5211966bf974c52",
                "19c77c2a39cbab31"
            ]
        ]
    },
    {
        "id": "55018d2ebf5efc50",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "add topic",
        "func": "msg.topic = \"response\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1040,
        "wires": [
            [
                "1a19de1a53c07b06"
            ]
        ]
    },
    {
        "id": "38548cb9b471c0d7",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "format dusk",
        "func": "var config = context.get('config') || false;\nvar response = context.get('response') || false;\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n} else if (msg.topic === 'response') {\n    response = msg.payload;\n    context.set('response', response);\n}\n\n\nvar time = Date.parse(response.data[0].astronomicalDusk);\n\nvar secs = time + (config.TimeOffset * 1000);\ntime = new Date(secs);\n\nvar hours = String(time.getUTCHours()).padStart(2, 0);\nvar minutes = String(time.getUTCMinutes()).padStart(2, 0);\n\nmsg.payload = hours + \":\" + minutes;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 900,
        "wires": [
            [
                "2ed1fc9fc3b18be0"
            ]
        ]
    },
    {
        "id": "bda5124dcfb07519",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "format moonrise / set",
        "func": "var config = context.get('config') || false;\nvar response = context.get('response') || false;\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n} else if (msg.topic === 'response') {\n    response = msg.payload;\n    context.set('response', response);\n}\n\n\nvar riseToday = Date.parse(response.data[0].moonrise);\nvar setToday = Date.parse(response.data[0].moonset); \nvar riseTomorrow = Date.parse(response.data[1].moonrise);\nvar setTomorrow = Date.parse(response.data[1].moonset);\nvar duskToday = Date.parse(response.data[0].astronomicalDusk);\nvar dawnTomorrow = Date.parse(response.data[1].astronomicalDawn);\n\nvar rise;\nvar set;\n\n// the last moon rise that happens before dawn tomorrow\nif ( riseTomorrow > dawnTomorrow || riseTomorrow === null)\n    rise = riseToday;\nelse\n    rise = riseTomorrow;\n\n// the first moon set after dusk today.\nif ( setToday < duskToday || setToday === null)\n    set = setTomorrow;\nelse \n    set = setToday;\n\nvar riseSecs = rise + (config.TimeOffset * 1000);\nvar setSecs = set + (config.TimeOffset * 1000);\n\nrise = new Date(riseSecs);\nset = new Date(setSecs);\n\nvar riseHours = String(rise.getUTCHours()).padStart(2,0);\nvar riseMinutes = String(rise.getUTCMinutes()).padStart(2,0);\n\nvar setHours = String(set.getUTCHours()).padStart(2, 0);\nvar setMinutes = String(set.getUTCMinutes()).padStart(2, 0);\n\nmsg.rise = riseHours + \":\" + riseMinutes;\nmsg.set = setHours + \":\" + setMinutes;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 980,
        "wires": [
            [
                "e19f826d4076368e",
                "4cdd62346387b047"
            ]
        ]
    },
    {
        "id": "59b4a5498e9e6852",
        "type": "http request",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "config.pl",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.215/cgi-bin/config.pl",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 280,
        "y": 920,
        "wires": [
            [
                "fa8f248b5ba76cff"
            ]
        ]
    },
    {
        "id": "fa8f248b5ba76cff",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "config.json",
        "func": "var lines;\nvar pair;\nvar i;\n\nlines = msg.payload.split(\"\\n\");\nmsg.payload = \"{\";\nfor (i=0; i<lines.length-1; i++) {\n    pair = lines[i].split(\"=\");\n    \n    if (isNaN(Number(pair[1])) || pair[1] == \"\") {\n        pair[1] = \"\\\"\" + pair[1] + \"\\\"\";\n    }\n\n    msg.payload = msg.payload + \"\\\"\" + pair[0] + \"\\\":\" + pair[1];\n\n    if (i < lines.length - 2)\n        msg.payload = msg.payload + \",\";\n}\nmsg.payload = msg.payload + \"}\";\n\nmsg.topic = \"config\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 920,
        "wires": [
            [
                "43d7fac82e106780",
                "1a19de1a53c07b06"
            ]
        ]
    },
    {
        "id": "43d7fac82e106780",
        "type": "json",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 610,
        "y": 920,
        "wires": [
            [
                "763977e3f8169597"
            ]
        ]
    },
    {
        "id": "5c57afaf0dae66db",
        "type": "debug",
        "z": "2a8b02ca.5fe626",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 1240,
        "wires": []
    },
    {
        "id": "33aedae4a7b740fe",
        "type": "inject",
        "z": "2a8b02ca.5fe626",
        "g": "db0229d041ab9ff5",
        "name": "Hourly",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 680,
        "y": 700,
        "wires": [
            [
                "a4436576abb33f7c"
            ]
        ]
    },
    {
        "id": "e5211966bf974c52",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "Format Phase",
        "func": "var config = context.get('config') || false;\nvar response = context.get('response') || false;\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n} else if (msg.topic === 'response') {\n    response = msg.payload;\n    context.set('response', response);\n}\n\nmsg.payload = response.data[1].moonPhase.current.text;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 860,
        "wires": [
            [
                "afcfbf2bc4831528"
            ]
        ]
    },
    {
        "id": "19c77c2a39cbab31",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "Format Image",
        "func": "var config = context.get('config') || false;\nvar response = context.get('response') || false;\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n} else if (msg.topic === 'response') {\n    response = msg.payload;\n    context.set('response', response);\n}\n\nvar img = response.data[1].moonPhase.current.text;\n\nif (img == \"New moon\")\n    msg.payload = \"wi-moon-new-dark\";\nelse if (img == \"Waxing crescent\") \n    msg.payload = \"wi-moon-wax-cres-dark\";\nelse if (img == \"First quarter\") \n    msg.payload = \"wi-moon-first-quart-dark\";\nelse if (img == \"Waxing gibbous\") \n    msg.payload = \"wi-moon-wax-gibb-dark\";\nelse if (img == \"Full moon\") \n    msg.payload = \"wi-moon-full-dark\";\nelse if (img == \"Vaning Gibbous\") \n    msg.payload = \"wi-moon-wan-gibb-dark\";\nelse if (img == \"Third quarter\") \n    msg.payload = \"wi-moon-third-quart-dark\";\nelse if (img == \"Vaning crescent\") \n    msg.payload = \"wi-moon-wan-cres-dark\";\nelse \n    msg.payload = \"Unknown\";\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 820,
        "wires": [
            [
                "84d5f8cd91983c52"
            ]
        ]
    },
    {
        "id": "763977e3f8169597",
        "type": "function",
        "z": "2a8b02ca.5fe626",
        "g": "ecde79bf94f43d5d",
        "name": "Add Time",
        "func": "var config = context.get('config') || false;\nvar response = context.get('response') || false;\n\nif (msg.topic === 'config') {\n    config = msg.payload;\n    context.set('config', config);\n} else if (msg.topic === 'response') {\n    response = msg.payload;\n    context.set('response', response);\n}\n\nvar offset = config.TimeOffset / 60 / 60;\n\nvar sign = \"+\";\nif (offset < 0)\n    sign=\"-\";\n\noffset = Math.abs(offset);\n\nconst date = new Date()\n\ndate.setHours(0,0,0,0);\n\nvar string = date.toISOString();\n\nstring.replace(\".000Z\", sign + String(offset).padStart(2, '0') + \":00\");\n\nmsg.payload.time = string;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 980,
        "wires": [
            [
                "e51b86a0a254896c",
                "5c57afaf0dae66db"
            ]
        ]
    },
    {
        "id": "f891618ac86bb2c0",
        "type": "ui_spacer",
        "z": "2a8b02ca.5fe626",
        "name": "spacer",
        "group": "dc0984f6.cbae78",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "cfa4dd989ccfe613",
        "type": "ui_spacer",
        "z": "2a8b02ca.5fe626",
        "name": "spacer",
        "group": "dc0984f6.cbae78",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "ecc0eb7c823e8774",
        "type": "ui_spacer",
        "z": "2a8b02ca.5fe626",
        "name": "spacer",
        "group": "dc0984f6.cbae78",
        "order": 20,
        "width": 6,
        "height": 1
    },
    {
        "id": "dc0984f6.cbae78",
        "type": "ui_group",
        "name": "CloudWatcher Weather data",
        "tab": "91f4bb8c.094048",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "91f4bb8c.094048",
        "type": "ui_tab",
        "name": "My observatory",
        "icon": "mi-home",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
